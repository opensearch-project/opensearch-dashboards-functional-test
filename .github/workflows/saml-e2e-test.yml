name: Snapshot based E2E SAML tests workflow
on:
  pull_request:
    branches: ['**']
env:
  VERSION: '2.6.0'
  KEYCLOAK_VERSION: '21.0.1'
jobs:
  tests:
    name: Run Cypress E2E tests
    runs-on: ubuntu-latest
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Get and run Keycloak
        run: |
          echo "Downloading Keycloak ${{ env.KEYCLOAK_VERSION }}"
          wget https://github.com/keycloak/keycloak/releases/download/${{ env.KEYCLOAK_VERSION }}/keycloak-${{ env.KEYCLOAK_VERSION }}.tar.gz
          echo "Unpacking Keycloak"
          tar -xzf keycloak-${{ env.KEYCLOAK_VERSION }}.tar.gz
          export KEYCLOAK_ADMIN=admin
          export KEYCLOAK_ADMIN_PASSWORD=admin
          cd keycloak-${{ env.KEYCLOAK_VERSION }}/bin
          chmod +x kc.sh
          echo "Starting keycloak"
          ./kc.sh start-dev --http-enabled=true --hostname-strict-https=false --http-host=localhost --http-relative-path /auth --health-enabled=true &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/auth/health)" != "200" ]]; do sleep 5; done'
          chmod +x kcadm.sh
          echo "Creating client"
          ./kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin
          CID=$(./kcadm.sh create clients -r master \
          -s clientId=saml \
          -s 'redirectUris=["https://localhost:5601*", "https://kibana.example.com*", "http://localhost:5601*", "http://localhost:5801*"]' \
          -s protocol=saml \
          -s 'defaultClientScopes=[]' \
          -s 'optionalClientScopes=[]' \
          -s 'attributes."saml.client.signature"=false' \
          -s 'attributes."saml_idp_initiated_sso_url_name"=idpi' \
          -s 'attributes."saml.force.post.binding"=false' \
          -s 'attributes."saml_assertion_consumer_url_post"="https://kibana.example.com:5601/security/saml/acs/idpinitiated"' \
          -s 'attributes."saml_assertion_consumer_url_redirect"="https://localhost:5601/api/sso/v1/assert"' \
          -s 'attributes."saml_single_logout_service_url_post"="https://localhost:5601/security/saml/logout"' \
          -s 'attributes."saml_single_logout_service_url_redirect"="https://localhost:5601/security/saml/logout"' \
          -s frontchannelLogout=false \
          -s consentRequired=true \
          -s surrogateAuthRequired=false -i) 
          echo "Creating client roles mapper"
          ./kcadm.sh create clients/$CID/protocol-mappers/models  -r master -s 'config."attribute.name"="Role"' -s 'config."single"="true"' -s 'name=roles list' -s 'protocolMapper="saml-role-list-mapper"' -s 'protocol=saml'
      - name: Get and run OpenSearch
        run: |
          echo "Downloading OpenSearch ${{ env.VERSION }}"
          wget https://artifacts.opensearch.org/releases/bundle/opensearch/${{ env.VERSION }}/opensearch-${{ env.VERSION }}-linux-x64.tar.gz
          echo "Unpacking OpenSearch"
          tar -xzf opensearch-${{ env.VERSION }}-linux-x64.tar.gz
          cd opensearch-${{ env.VERSION }}
          echo "Injecting SAML configuration"
          cd config/opensearch-security/
          wget -O yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x yq
          yq -i ".config.dynamic.authc.basic_internal_auth_domain.http_authenticator.challenge = false" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_enabled = true" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.transport_enabled = false" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.order = 10" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.type = \"saml\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.challenge = true" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.config.idp.metadata_url = \"http://localhost:8080/auth/realms/master/protocol/saml/descriptor\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.config.idp.entity_id = \"http://localhost:8080/auth/realms/master\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.config.sp.entity_id = \"saml\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.config.kibana_url = \"http://localhost:5601\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.config.roles_key = \"Role\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.http_authenticator.config.exchange_key = \"peuvgOLrjzuhXfRUwzU_t0jYQWJf1agRUCevWAUfVKE_SHVAat6lmK22jlz0YIAXd0\"" config.yml
          yq -i ".config.dynamic.authc.saml_auth_domain.authentication_backend.type = \"noop\"" config.yml
          echo "Installing demo configuration"
          cd ../../plugins/opensearch-security/tools
          chmod +x install_demo_configuration.sh
          ./install_demo_configuration.sh -y
          echo "Starting OpenSearch"
          ../../../bin/opensearch &
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://localhost:9200 -ku admin:admin)" != "503" ]]; do sleep 5; done'
          echo "Setting up certificates"
          chmod +x securityadmin.sh
          ./securityadmin.sh -cd ../../../config/opensearch-security/ -icl -nhnv \
          -cacert ../../../config/root-ca.pem \
          -cert ../../../config/kirk.pem \
          -key ../../../config/kirk-key.pem
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://localhost:9200 -ku admin:admin)" != "200" ]]; do sleep 5; done'
      - name: Get and run OpenSearch-Dashboards
        run: |
          echo "Downloading OpenSearch-Dashboards ${{ env.VERSION }}"
          wget https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/${{ env.VERSION }}/opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
          echo "Unpacking OpenSearch-Dashboards"
          tar -xzf opensearch-dashboards-${{ env.VERSION }}-linux-x64.tar.gz
          echo "Injecting SAML configuration"
          cd opensearch-dashboards-${{ env.VERSION }}/config
          echo "opensearch_security.auth.type: saml" >> opensearch_dashboards.yml
          echo "server.xsrf.allowlist: [/_opendistro/_security/saml/acs/idpinitiated, /_opendistro/_security/saml/acs, /_opendistro/_security/saml/logout]" >> opensearch_dashboards.yml
          echo "home.disableWelcomeScreen: true" >> opensearch_dashboards.yml
          echo "Starting OpenSearch-Dashboards"
          cd ../bin
          chmod +x opensearch-dashboards
          ./opensearch-dashboards serve &
      - name: Checkout functional-test
        uses: actions/checkout@v2
        with:
          repository: ${{github.repository}}
          path: functional-test
      - name: Get Cypress version
        id: cypress_version
        run: |
          echo "::set-output name=cypress_version::$(cat ./functional-test/package.json | jq '.devDependencies.cypress' | tr -d '"')"
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
        env:
          CYPRESS_INSTALL_BINARY: ${{ steps.cypress_version.outputs.cypress_version }}
      - run: npx cypress cache list
      - run: npx cypress cache path
      - name: Yarn install
        uses: cypress-io/github-action@v2
        with:
          working-directory: functional-test
          command: yarn install
      - name: Cypress tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: functional-test
          command: yarn cypress:run-without-security --browser chromium --spec 'cypress/integration/plugins/security-dashboards-plugin/*.js'
          wait-on: 'http://localhost:5601'
      - name: Upload E2E test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: /home/runner/work/opensearch-dashboards-functional-test/opensearch-dashboards-functional-test/functional-test/cypress/reports/index.html
